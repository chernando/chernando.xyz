---
---

<div
  id="reading-progress"
  aria-hidden="true"
>
  <div id="progress-fill"></div>
</div>

<style>
  #reading-progress {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: transparent;
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  #reading-progress.visible {
    opacity: 1;
  }

  #progress-fill {
    height: 100%;
    background: var(--color-primary-600);
    width: 0%;
    transition: width 0.1s ease;
  }

  /* Adapt to dark mode */
  @media (prefers-color-scheme: dark) {
    #progress-fill {
      background: var(--color-primary-400);
    }
  }

  /* Completely hide for users who prefer reduced motion */
  @media (prefers-reduced-motion: reduce) {
    #reading-progress {
      display: none;
    }
  }

  /* High contrast mode */
  @media (forced-colors: active) {
    #reading-progress {
      background: transparent;
    }

    #progress-fill {
      background: Highlight;
    }
  }
</style>

<script>
  class ReadingProgress {
    constructor() {
      this.progressBar = document.getElementById('reading-progress');
      this.progressFill = document.getElementById('progress-fill');
      this.article = document.querySelector('article[itemtype="https://schema.org/BlogPosting"]');

      if (!this.progressBar || !this.article) return;
      this.init();
    }

    init() {
      let ticking = false;

      window.addEventListener('scroll', () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            this.updateProgress();
            ticking = false;
          });
          ticking = true;
        }
      });
    }

    updateProgress() {
      const articleRect = this.article.getBoundingClientRect();
      const articleHeight = this.article.offsetHeight;
      const windowHeight = window.innerHeight;
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

      // Get article position relative to document
      const articleOffsetTop = this.article.offsetTop;

      let progress = 0;

      // Check if we've scrolled past the article start
      if (scrollTop >= articleOffsetTop) {
        // Calculate how much of the article we've scrolled through
        const scrolledIntoArticle = scrollTop - articleOffsetTop;
        const readableHeight = articleHeight - windowHeight;

        if (readableHeight > 0) {
          // Article is longer than viewport
          progress = Math.min((scrolledIntoArticle / readableHeight) * 100, 100);
        } else {
          // Article is shorter than viewport - calculate based on visibility
          const visiblePortion = Math.min(scrolledIntoArticle / articleHeight, 1);
          progress = visiblePortion * 100;
        }
      }

      // Clamp progress between 0 and 100
      progress = Math.max(0, Math.min(100, progress));

      // Show/hide progress bar based on scroll position (show after 1% to avoid flickering)
      if (progress > 1) {
        this.progressBar.classList.add('visible');
      } else {
        this.progressBar.classList.remove('visible');
      }

      // Update progress bar (visual only, hidden from screen readers)
      this.progressFill.style.width = `${progress}%`;
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ReadingProgress());
  } else {
    new ReadingProgress();
  }
</script>
